## --------------------- QUESTÃO 1 -----------------------------
##APROVADO
def calculadora(t,operacao):
    operacao = operacao.upper()
    if operacao == 'SOMA':
        return t[0] + t[1]
    elif operacao == 'MULT':
        return t[0]*t[1]
    elif operacao == 'DIV':
        return t[0]//t[1]
    elif operacao == 'SUB':
        return t[0]-t[1]
    elif operacao == 'MOD':
        return t[0]%t[1]
    elif operacao == 'POT':
        return t[0]**t[1]
    else:
        print("A operação informada não foi reconhecida")

## --------------------- QUESTÃO 2 -----------------------------
##APROVADO
def numero_valido(numero):
    ddd = ''
    numero2 = ''
    ddd2 = []
    numero_sem_ddd = []
    numero = str(numero)
    for c in range(len(numero)):
        if len(numero) == 8 or len(numero) == 9:
            numero2 += numero[c]
        elif len(numero) == 10 or len(numero) == 11:
            if c<2:
                ddd += numero[c]
            else:
                numero2+= numero[c]

    ddd2.append(ddd)
    numero_sem_ddd.append(numero2)
    if len(numero2)>0:
        if len(numero2) == 9 and numero2[0] == '9':
            if len(ddd) == 0:
                print('O número digitado não possui DDD, porém é um número válido')
                return print(tuple(numero_sem_ddd))
            elif len(ddd) == 2:
                print('O número digitado possui DDD e é um número válido')
                return print(tuple(ddd2),tuple(numero_sem_ddd))
        elif len(numero2) == 8:
            if len(ddd) == 0:
                print('O número digitado não possui DDD, porém é um número válido')
                return print(tuple(numero_sem_ddd))
            elif len(ddd) == 2:
                print('O número digitado possui DDD e é um número válido')
                return print(tuple(ddd2),tuple(numero_sem_ddd))
        else:
            pass
    print("Número inválido")
## --------------------- QUESTÃO 3 -----------------------------
##APROVADO
def situacao_aluno(t):
    soma=0
    situacao = []
    final = []
    for c in t:
        if type(c) !=  str:
            soma+=c
        else:
            situacao.insert(0,c)##colocar na posição 1
            
    media = soma/(len(t)-1)
    situacao.append(float(f"{media:.2f}"))
    if media >= 7:
        final = ['aprovado','parabéns!']
        situacao += final
    elif media >= 5 and media < 7:
        final = ['aprovado']
        situacao += final
    else:
        final = ['reprovado']
        situacao += final
    return tuple(situacao)

## --------------------- QUESTÃO 4 -----------------------------
#APROVADO
def minimo(t):
    tmin = t[0]
    for c in t:
        if t[c] < tmin:
            tmin = t[c]
    return tmin

def maximo(t):
    tmax = t[-1]
    for c in t:
        if t[c]>tmax:
            tmax = t[c]
    return tmax

def colisao(t1,t2): #quem sabe diminuir esse código
    t1min = minimo(t1)
    t1max = maximo(t1)
    t2min = minimo(t2)
    t2max = maximo(t2)
    ##casos que tem colisão: se o t1min for maior que o t2min e menor que o t2max
    ## ou se o t1max for maior que t1min do outro e menor que t2max
    ##basicamente estou analisando se o minimo ou o maximo de um está contido em outro.
    lista = range(t2min,t2max+1)
    for c in range(t1min,t1max+1):
        if c in list(range(t2min,t2max+1)):
            return True
    return False

## --------------------- QUESTÃO 5 -----------------------------
#QUASE APROVADO
def ordem_crescente(c):
    for m in range(len(c)):
        for n in range(m,len(c)):
            if c[m] > c[n]:
                aux = c[m]
                c[m] = c[n]
                c[n] = aux
    return c
def maiores_que(n,lista):
    lista = ordem_crescente(lista)
    lista_maiores = []
    for c in lista:
        if c>n:
            lista_maiores.append(c)
    return lista_maiores

##--------------------------------QUESTÃO 6 ---------------------
##VERIFICAR
def sequencia_biologica(dna):
    tamanho = len(dna)
    leucinas, posGG, posRR = 0,[],[]
    nDNA = ''
    for m in range(0,len(dna),2): #AQUI
        if dna[m:m+2] == 'GG':
            posGG.append(m)
        if dna[m:m+2] == 'RR':
            posRR.append(m)
        if dna[m:m+2] == 'LL':
            leucinas+=1
        if dna[m:m+4] == 'SSSR':
            for c in range(m,m+4):
                dna ##AQUI 
                dna[c] = 'a'
    ##usar comandos de lista como count ou find para fazer essas questões
    for c in range(100):
        nDNA += dna[c]
    print(f"A quantidade de Leucinas é de: {leucinas}"
          f"As posições em que há duas glicinas(GG): {posGG}"
          f"As posições em que há duas argininas(RR): {posRR}")
    print("-="*30)
    print(f'Os 100 primeiros aminoácidos da sequência: {nDNA}')
    print(f"A cadeia de aminoácidos escrita com a troca de 3 serinas e 1 arginina(SSSR) por alaninas (AAAA): {dna}")

##--------------------------------QUESTÃO 7 ---------------------
from random import randint
def cria_matriz(l,c):
    linha = []
    matriz = []
    for m in range(c):
        for n in range(l):
            linha.append(randint(-100,100))
        matriz.append(linha)
        linha = []
    return matriz

def soma_matriz(A,B):
    linha = []
    matriz = []
    if len(A) == len(B) and len(A[0]) == len(B[0]):
        for m in range(len(A)):
            for n in range(len(A[0])):
                linha.append(A[m][n]+B[m][n])
            matriz.append(linha)
            linha = []
    return matriz

def multiplicar_matriz_escalar(B,k):
    A = B[:]
    for m in range(len(A)):
        for n in range(len(A[0])):
            A[m][n] = k*A[m][n]
    return A

def multiplicacao_matrizes(A,B):
    linha = []
    matriz = []
    soma = 0
    if len(A[0]) == len(B):
        for m in range(len(A[0])):
            for n in range(len(B)):
                soma+=A[m][n]*B[n][m]
                linha.append(soma)
                sona = 0
            matriz.append(linha)
    return matriz

##--------------------------------QUESTÃO 8 ---------------------
def menor_IPCA(lista_ipca):
    menor_ipca = 15
    menor_chave = ''
    for c in lista_ipca.keys():
        for n in c.keys():
            if lista_ipca[c][n] < menor_ipca:
                if n == 'Brasil':
                    pass
                else:
                    menor_ipca = lista_ipca[c][n]
                    menor_chave = n
    return menor_ipca, menor_chave

def maior_IPCA(lista_ipca):
    maior_ipca = 0
    maior_chave = ''
    for c in lista_ipca.keys():
        for n in c.keys():
            if lista_ipca[c][n] > maior_ipca:
                if n == 'Brasil':
                    pass
                else:
                    maior_ipca = lista_ipca[c][n]
                    maior_chave = n
    return maior_ipca, maior_chave

def menor_IPCA_media(lista_ipca):
    n, media = 0, 1000
    menor_media = 0
    menor_categoria = ''
    
    for c in lista_ipca.keys():
        media = 0
        n = 0
        for n in c.keys():
            if n == 'Brasil':
                pass
            else:
                media += lista_ipca[c][n]
                n+=1
        media = media/n
        if menor_media > media:
            menor_media = media
            menor_categoria = c

    return menor_media, menor_categoria

def maior_IPCA_media(lista_ipca):
    n, media = 0, 0
    maior_media = 0
    maior_categoria = ''
    
    for c in lista_ipca.keys():
        media = 0
        n = 0
        for n in c.keys():
            if n == 'Brasil':
                pass
            else:
                media += lista_ipca[c][n]
                n+=1
        media = media/n
        if maior_media > media:
            maior_media = media
            maior_categoria = c

    return maior_media, maior_categoria


                
